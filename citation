#!/bin/env python3

import argparse
import re
from citations import defaults, themes
from citations.factory import Factory

main_font = "BMmini.ttf"
altfont = "Megan_Serif.ttf"

parser = argparse.ArgumentParser(description='Generates Papers Please citation cards.',
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('lines', nargs=1,
                    help='lines of the citation, separated by ; or newline')
parser.add_argument('penalty', nargs="?", default=defaults.penalty,
                    help='penalty text')
parser.add_argument('--title', '-t', default=defaults.title,
                    help='title of the citation')
parser.add_argument('--stamp', '-s', default=defaults.stamp_filename,
                    help='name of stamp .png file')
parser.add_argument('--altfont', '-a', action="store_true",
                    help='use alternative (old) font for the title')
parser.add_argument('--condensed', '-o', action="store_true",
                    help='use alternative smaller spacing for lines')
parser.add_argument('--barcode', '-r', default=defaults.barcode_str,
                    help='barcode format to use in widths of lines as comma separated list')
parser.add_argument('--theme', '-c', default=defaults.theme,
                    help='color scheme - can be overriden by individual color settings',
                    choices=themes.named.keys())
parser.add_argument('--foreground', '--fg', '-f', default=None,
                    help='hex color to use for foreground text and elements')
parser.add_argument('--background', '--bg', '-b', default=None,
                    help='hex color to use for background')
parser.add_argument('--details', '--det', '-d', default=None,
                    help='hex color to use for background details')
parser.add_argument('--output', default="citation.png",
                    help='file to output into (always saves in PNG format)')
parser.add_argument('--width', default=defaults.width, type=int,
                    help='the width of the canvas image, including the margins')
parser.add_argument('--height', default=defaults.height, type=int,
                    help='minimum height of image, fits 1 title line, 3 body and 1 for footer, '
                         'gets adjusted to fit content automatically')

args = parser.parse_args()


if __name__ == '__main__':
    theme = themes.named[args.theme]
    theme = themes.Theme(args.background or theme.background,
                         args.foreground or theme.foreground,
                         args.details or theme.details)

    factory = Factory(theme=theme, stamp_filename=args.stamp, use_alt_font=args.altfont, condensed=args.condensed,
                      width=args.width, min_height=args.height)

    lines = args.lines[0].split(";")  # Might have a few problems if the lines contain ;
    penalty = args.penalty.split(";")
    title = args.title.split(";")
    barcode = [int(width) for width in re.findall(r"[\w']+", args.barcode)]
    factory.generate_file(args.output, content=lines, penalty=penalty, title=title, barcode=barcode)
    print("Generated \""+args.output+"\"")
